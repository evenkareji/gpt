import Head from 'next/head';

import { Configuration, OpenAIApi } from 'openai';
import { useState } from 'react';

export default function Home() {
  const [message, setMessage] = useState('');
  const [messages, setMessages] = useState([]);
  const configuration = new Configuration({
    apiKey: process.env.NEXT_PUBLIC_OPENAPI_KEY,
  });
  const openai = new OpenAIApi(configuration);

  const handleSubmit = async (e) => {
    e.preventDefault();
    const response = await openai.createChatCompletion({
      model: 'gpt-3.5-turbo',
      messages: [
        {
          role: 'user',
          content: message,
        },
      ],
    });

    setMessages((prevMessages) => [
      ...prevMessages,
      {
        sender: 'user',
        text: message,
      },
      { sender: 'ai', text: response.data.choices[0].message?.content },
    ]);
    console.log(messages);
    // console.log(response.data.choices[0].message?.content);
  };
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
        <link href="/dist/output.css" rel="stylesheet"></link>
      </Head>
      <div className="flex flex-col items-center justify-center h-screen">
        <div className="max-w-lg w-full">
          <div
            style={{ height: '650px' }}
            className="bg-gray-100 w-full p-4 h-96 overflow-scroll rounded-lg w-full"
          >
            <span className="text-center block font-medium text-2xl border-b-2 border-indigo-400 pb-4 mb-3">
              ChatGPT-clone
            </span>
            {messages.map((message, index) => (
              <div
                className={`flex ${
                  message.sender === 'user' ? 'justify-end' : 'justify-start'
                } mb-2`}
                key={index}
              >
                <div
                  className={`${
                    message.sender === 'user'
                      ? 'bg-indigo-400 text-white'
                      : 'bg-gray-200'
                  }  p-2 rounded-md`}
                >
                  {message.text}
                </div>
              </div>
            ))}
          </div>
          <form className="w-full" onSubmit={(e) => handleSubmit(e)}>
            <div className="flex">
              <input
                type="text"
                className="flex-1 border-2 py-2 px-4 focus:outline-none rounded-lg focus:border-indigo-400"
                onChange={(e) => setMessage(e.target.value)}
                value={message}
              />
              <button
                type="submit"
                className="p-2 bg-indigo-400 rounded-lg text-white hover:bg-indigo-500"
              >
                送信
              </button>
            </div>
          </form>
        </div>
      </div>
    </>
  );
}
